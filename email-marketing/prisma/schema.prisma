// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------------
// Enums
// ------------------------------------------------------------

enum Role {
  ADMIN
  MANAGER
  USER
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

enum ContactStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
}

enum DeliveryStatus {
  QUEUED
  SENDING
  SENT
  FAILED
  OPENED
  CLICKED
  UNSUBSCRIBED
}

// ------------------------------------------------------------
// NextAuth standard models (compatible with @auth/prisma-adapter)
// ------------------------------------------------------------

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          Role     @default(USER)

  accounts Account[]
  sessions Session[]
  profile  Profile?

  // Domain relations
  campaigns   Campaign[]        @relation("UserCampaigns")
  mediaAssets MediaAsset[]      @relation("UserMediaAssets")
  contacts    Contact[]         @relation("UserContacts")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token       String? @map("refresh_token")
  access_token        String? @map("access_token")
  expires_at          Int?    @map("expires_at")
  token_type          String? @map("token_type")
  scope               String?
  id_token            String? @map("id_token")
  session_state       String?
  oauth_token_secret  String? @map("oauth_token_secret")
  oauth_token         String? @map("oauth_token")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

// ------------------------------------------------------------
// Domain models
// ------------------------------------------------------------

model Campaign {
  id          String         @id @default(cuid())
  name        String
  description String?
  status      CampaignStatus @default(DRAFT)

  createdById String
  createdBy   User           @relation("UserCampaigns", fields: [createdById], references: [id], onDelete: Cascade)

  scheduledAt DateTime?
  sentAt      DateTime?

  template   Template?
  recipients CampaignRecipient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id         String   @id @default(cuid())
  campaignId String   @unique
  name       String
  subject    String
  html       String

  campaign    Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  mediaAssets MediaAsset[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MediaAsset {
  id           String   @id @default(cuid())
  templateId   String?
  uploadedById String
  url          String
  contentType  String
  size         Int
  createdAt    DateTime @default(now())

  template  Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  uploadedBy User      @relation("UserMediaAssets", fields: [uploadedById], references: [id], onDelete: SetNull)
}

model Contact {
  id          String        @id @default(cuid())
  email       String        @unique
  firstName   String?
  lastName    String?
  status      ContactStatus @default(ACTIVE)
  createdById String
  createdBy   User          @relation("UserContacts", fields: [createdById], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  memberships CampaignRecipient[]
}

model CampaignRecipient {
  id         String         @id @default(cuid())
  campaignId String
  contactId  String
  status     DeliveryStatus @default(QUEUED)
  lastError  String?
  sentAt     DateTime?
  openedAt   DateTime?
  clickedAt  DateTime?

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact  Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
}
